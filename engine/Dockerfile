# ===================================================================
# üê≥ VeganFlemme Engine - Backend Dockerfile  
# ===================================================================
# Multi-stage build pour optimiser la taille de l'image de production
# Architecture: Node.js 18 + Express + TypeScript
# Ports: 3001 (API), Health check: /api/health
# ===================================================================

# ===================================================================
# üì¶ STAGE 1: Build Stage - Compilation TypeScript
# ===================================================================
FROM node:18-alpine AS builder

# M√©tadonn√©es de l'image
LABEL maintainer="VeganFlemme Team"
LABEL version="1.0.0"
LABEL description="VeganFlemme API Engine - Nutrition and menu generation backend"

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Note: D√©pendances syst√®me g√©n√©ralement pas n√©cessaires pour ce projet
# D√©commentez si des packages natifs sont requis :
# RUN apk add --no-cache git python3 make g++

# Copier les fichiers de configuration package
COPY package*.json ./
COPY tsconfig*.json ./

# Installer TOUTES les d√©pendances (dev + prod) pour le build
RUN npm ci --production=false

# Copier le code source
COPY src/ ./src/
COPY scripts/ ./scripts/

# Compiler TypeScript en utilisant le binaire local
RUN ./node_modules/.bin/tsc

# ===================================================================
# üöÄ STAGE 2: Production Stage - Image finale optimis√©e
# ===================================================================
FROM node:18-alpine AS production

# Cr√©er un utilisateur non-root pour la s√©curit√©
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodeuser -u 1001

# D√©finir le r√©pertoire de travail
WORKDIR /app

# Copier les fichiers de configuration package
COPY package*.json ./

# Installer UNIQUEMENT les d√©pendances de production
RUN npm ci --omit=dev && npm cache clean --force

# Copier l'application compil√©e depuis le stage builder
COPY --from=builder /app/dist ./dist

# Copier les scripts utilitaires
COPY --from=builder /app/scripts ./scripts

# Changer la propri√©t√© des fichiers √† l'utilisateur non-root
RUN chown -R nodeuser:nodejs /app
USER nodeuser

# Exposer le port de l'API
EXPOSE 3001

# Variables d'environnement par d√©faut pour la production
ENV NODE_ENV=production
ENV PORT=3001
ENV LOG_LEVEL=info

# Health check pour v√©rifier que l'API r√©pond
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3001/api/health || exit 1

# Commande par d√©faut pour d√©marrer l'application
CMD ["node", "dist/index.js"]